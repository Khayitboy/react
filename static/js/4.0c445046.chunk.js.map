{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","Dialog","className","style","user","id","name","Message","dialog","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElem","dialogs","map","elem","messagesElem","messages","dialogs_wrapper","users","message_form","formData","addMessage2","newMessage","compose","dispatch","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,gBAAkB,iCAAiC,MAAQ,uBAAuB,KAAO,sBAAsB,OAAS,wBAAwB,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,gC,sICGjPC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAeE,KAAKC,OADG,kBAAC,IAAD,CAAWC,GAAG,eAHV,GACXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,+FCJ9DM,EARA,SAACJ,GACZ,OACI,yBAAKK,UAAWC,IAAMC,MAClB,kBAAC,IAAD,CAASN,GAAI,YAAYD,EAAMQ,IAAKR,EAAMS,QCEvCC,EAPC,SAACV,GACb,OACI,yBAAKK,UAAWC,IAAMK,QAASX,EAAMY,U,kCC6BvCC,EAAYC,YAAiB,IAW7BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EATL,SAAChB,GACpB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAYJ,KAAK,aAAagB,YAAY,sBAC3F,4CAOGC,EAtCC,SAAC1B,GAEb,IAAIP,EAAQO,EAAM2B,YACdC,EAAcnC,EAAMoC,QAAQC,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAQtB,KAAMsB,EAAKtB,KAAMD,GAAIuB,EAAKvB,QAC5EwB,EAAevC,EAAMwC,SAASH,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAASnB,QAASmB,EAAKnB,aAMvE,OACI,yBAAKP,UAAWC,IAAM4B,iBAClB,yBAAK7B,UAAWC,IAAM6B,OACjBP,GAEL,yBAAKvB,UAAWC,IAAMuB,SACjBG,EACD,yBAAK3B,UAAWC,IAAM8B,cAClB,kBAACrB,EAAD,CAAqBG,SAZjB,SAACmB,GACjBrC,EAAMsC,YAAYD,EAASE,mB,wBCQpBC,sBACXrC,aAjBoB,SAACV,GACrB,MAAM,CACFkC,YAAalC,EAAMkC,gBAIA,SAACc,GACxB,MAAM,CACFH,YAAa,SAACC,GACVE,EAASC,YAAwBH,SASzC3C,IAFW4C,CAGbd","file":"static/js/4.0c445046.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__3nTXv\",\"users\":\"Dialogs_users__2B6jN\",\"user\":\"Dialogs_user__2KJIC\",\"active\":\"Dialogs_active__Ow5Vr\",\"dialogs\":\"Dialogs_dialogs__1rGm4\",\"dialog\":\"Dialogs_dialog__1iiUX\",\"message_form\":\"Dialogs_message_form__BLrZm\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect  to=\"/login\" />\r\n            return <Component  {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport style from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Dialog = (props) => {\r\n    return (\r\n        <div className={style.user}>\r\n            <NavLink to={\"/dialogs/\"+props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport style from './../Dialogs.module.css';\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={style.dialog}>{props.message}</div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport style from './Dialogs.module.css';\r\nimport Dialog from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    let state = props.dialogsPage;\r\n    let dialogsElem = state.dialogs.map((elem) => <Dialog name={elem.name} id={elem.id}/>)\r\n    let messagesElem = state.messages.map((elem) => <Message message={elem.message}/>)\r\n\r\n    let addNewMessage = (formData) => {\r\n        props.addMessage2(formData.newMessage);\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs_wrapper}>\r\n            <div className={style.users}>\r\n                {dialogsElem}\r\n            </div>\r\n            <div className={style.dialogs}>\r\n                {messagesElem}\r\n                <div className={style.message_form}>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage} />   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50);\r\n\r\nconst addMessageForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} validate={[required, maxLength]} name=\"newMessage\" placeholder=\"Enter new message\" />\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(addMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { addMessageActionCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addMessage2: (newMessage) => {\r\n            dispatch(addMessageActionCreator(newMessage));\r\n        }\r\n    } \r\n\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);;"],"sourceRoot":""}